Implementing Socket Services in Node.js:

- network sockets are the endpoints of communication that flow across a computer network
- a socket works using a socket address, which is the combination of an ip address and port
- there are 2 types of of points in a socket connection: a server that listens for connections and a client that opens a connection to the server
- the node.js net module sockets communicate by sending raw data using TCP
- sockets are also handy when communicating with other processes running on the same computer. Processes cannot share memory directly, 
  so if you want to have access to the data in one process from another, you can open up the same socket in each process and read and write data between the two.

The net.Socket Object:
- socket objects are created on both the socket server and client and allow data to be written and read back and forth between them
- the socket object implements a duplex stream, so it provides all the functionality that Writable and Readable streams provide.
- on the socket client, the socket object is created internally when you call the net.connect() or net.createConnection() 
- this object is intended to represent the socket connection to the server
- you use the socket object to monitor the connection, send data to the server, and handle the response back

- there is no client object in the node.js net module because the socket object acts as the full client allowing you to send or recieve data and terminate the connection

- on the socket server, the Socket object is created when a client connects to the server and is passed to the connection event handler. 
  this object is intended to represent the socket connection to the client. On the server, you use the Socket object to monitor the client connection
  as well as send and receive data to and from the client

- there are many ways to create a socket object. each of these methods have a net.connect() and a net.createConnection() counterpart, both work exactly the same way.
- all the calls return a socket object. the only difference is the first parameters they accept. the final parameter for all of them is a callback function
  that is executed when a connection is opened to the server. 
- the options parameter is an object that contains the properties that define the socket connection.
- options that can be specified:
    - port
    - host
    - localAddress
    - localPort
    - family
    - lookup

- net.connect(options, [connectionListener])
- net.createConnection(options, [connectionListener])
- net.connect(port, [host], [connectionListener])
- net.createConnection(port, [host], [connectionListener])
- net.connect(path, [connectListener])
- net.createConnection(path, [connectListener])

Once the socket is created, it provides several events that are emitted during the life cycle of the socket.


THE net.Server OBJECT: ------------------------------------------------------------------------------------------------------------------------------------------------

- the net.Server object is used to create a TCP socket server and begin listening for connections to which you will be able to read and write data
- the Server object is created internally when you call the net.createServer() method. This object represents the socket server and handles the 
  listening for connections and then sending and receiving data on those connections to the server

- when the server receives a connection, the Server creates a socket object and passes it to any connection event handlers that are listening.
- Socket object implements a duplex stream, so you cna use the write() method to stream writes of data back to the client and a data event
  handler to stream data from the client

To create a Server object, you use the net.createServer() method:
net.createServer([options], [connectionListener])


// IMPLEMENTING TCP SOCKET SERVERS AND CLIENTS -------------------------------------------------------------------------------------------------------------------------
 - see socket_client.js and socket_server.js

 